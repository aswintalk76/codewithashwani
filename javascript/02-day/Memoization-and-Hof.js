/* ðŸ’¡"JavaScript-with-JC"
ðŸ‘‰ Memoization and Higher Order Functions 
ðŸ’¡ Memoization is a technique for speeding up applications by caching the results of 
   expensive function calls and returning them when the same inputs are passed again.
   memoization makes applications more efficient and faster.

ðŸ’¡ Higher order functions are functions that either accept functions as an argument or return functions 
ðŸ’¡ Some of the Higher order functions that take first class citizen function as an argument. 
ðŸ‘‰ 1) Array.prototype.forEach
ðŸ‘‰ 2) Array.prototype.filter
ðŸ‘‰ 3) Array.prototype.map
ðŸ‘‰ 4) Array.prototype.reduce
ðŸ‘‰ 5) Array.prototype.some
ðŸ‘‰ 6) Array.prototype.every
ðŸ‘‰ 7) Array.prototype.find
ðŸ‘‰ 8) Array.prototype.findIndex  
*/

// ðŸ’¡ Memoization Example

// Expensive function taking longer time ( Approx. 2 sec )
function squareNumber(number) {
  let start = new Date().getTime();
  let end = start + 2000;

  while (start < end) {
    start = new Date().getTime();
  }

  return number * number;
}

// Higher order function
function memoize(cbFunc) {
  //  ðŸ‘‡ a cache object
  let cache = {};

  // ðŸ‘‡ inner anonymous function has access to cache object due to closures
  return (...args) => {
    //  ðŸ‘‡ argsKey is key of cache object, Stringifying array of arguments into key using JSON.stringify
    let argsKey = JSON.stringify(args);

    //  ðŸ‘‡ execute `cbFunc` only if there is no cached value
    if (!cache[argsKey]) {
      cache[argsKey] = cbFunc(...args);
    }

    //  ðŸ‘‡ return the cached value
    return cache[argsKey];
  };
}

const memoizedSquare = memoize(squareNumber);

console.time("First function call");
console.log(memoizedSquare(2)); // takes 2 sec, 4
console.timeEnd("First function call"); // First function call: 2.005s

console.time("Second function call");
console.log(memoizedSquare(3)); // takes 2 sec, 9
console.timeEnd("Second function call"); // Second function call: 2.000s

console.time("Third function call");
console.log(memoizedSquare(5)); // takes 2 sec, 25
console.timeEnd("Third function call"); // Third function call: 2.001s

console.time("Fourth function call");
console.log(memoizedSquare(2)); // returns cached value 4
console.timeEnd("Fourth function call"); // Fourth function call: 0.324ms

// ðŸ’¡ Higher Order Function Example

// Higher order function taking first class citizen function as an argument
function calculate(cbfunc, radius) {
  return cbfunc(radius);
}

// first class citizen function
function area(radius) {
  return Math.PI * radius * radius;
}

// first class citizen function
function perimeter(radius) {
  return 2 * Math.PI * radius;
}

const areaOfCircle = calculate(area, 5);
const perimeterOfCircle = calculate(perimeter, 5);

console.log(areaOfCircle); // 78.53981633974483
console.log(perimeterOfCircle); // 31.41592653589793
